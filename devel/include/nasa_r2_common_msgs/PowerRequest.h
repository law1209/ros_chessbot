// Generated by gencpp from file nasa_r2_common_msgs/PowerRequest.msg
// DO NOT EDIT!


#ifndef NASA_R2_COMMON_MSGS_MESSAGE_POWERREQUEST_H
#define NASA_R2_COMMON_MSGS_MESSAGE_POWERREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nasa_r2_common_msgs
{
template <class ContainerAllocator>
struct PowerRequest_
{
  typedef PowerRequest_<ContainerAllocator> Type;

  PowerRequest_()
    : channel()
    , state(false)  {
    }
  PowerRequest_(const ContainerAllocator& _alloc)
    : channel(_alloc)
    , state(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _channel_type;
  _channel_type channel;

   typedef uint8_t _state_type;
  _state_type state;





  typedef boost::shared_ptr< ::nasa_r2_common_msgs::PowerRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nasa_r2_common_msgs::PowerRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PowerRequest_

typedef ::nasa_r2_common_msgs::PowerRequest_<std::allocator<void> > PowerRequest;

typedef boost::shared_ptr< ::nasa_r2_common_msgs::PowerRequest > PowerRequestPtr;
typedef boost::shared_ptr< ::nasa_r2_common_msgs::PowerRequest const> PowerRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nasa_r2_common_msgs::PowerRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nasa_r2_common_msgs::PowerRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nasa_r2_common_msgs::PowerRequest_<ContainerAllocator1> & lhs, const ::nasa_r2_common_msgs::PowerRequest_<ContainerAllocator2> & rhs)
{
  return lhs.channel == rhs.channel &&
    lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nasa_r2_common_msgs::PowerRequest_<ContainerAllocator1> & lhs, const ::nasa_r2_common_msgs::PowerRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nasa_r2_common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::nasa_r2_common_msgs::PowerRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nasa_r2_common_msgs::PowerRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nasa_r2_common_msgs::PowerRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nasa_r2_common_msgs::PowerRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nasa_r2_common_msgs::PowerRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nasa_r2_common_msgs::PowerRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nasa_r2_common_msgs::PowerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1045ad41f2608d96980e5002751cdcee";
  }

  static const char* value(const ::nasa_r2_common_msgs::PowerRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1045ad41f2608d96ULL;
  static const uint64_t static_value2 = 0x980e5002751cdceeULL;
};

template<class ContainerAllocator>
struct DataType< ::nasa_r2_common_msgs::PowerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nasa_r2_common_msgs/PowerRequest";
  }

  static const char* value(const ::nasa_r2_common_msgs::PowerRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nasa_r2_common_msgs::PowerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string channel\n"
"bool state\n"
;
  }

  static const char* value(const ::nasa_r2_common_msgs::PowerRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nasa_r2_common_msgs::PowerRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.channel);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PowerRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nasa_r2_common_msgs::PowerRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nasa_r2_common_msgs::PowerRequest_<ContainerAllocator>& v)
  {
    s << indent << "channel: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.channel);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NASA_R2_COMMON_MSGS_MESSAGE_POWERREQUEST_H
