// Generated by gencpp from file nasa_r2_common_msgs/ReplanType.msg
// DO NOT EDIT!


#ifndef NASA_R2_COMMON_MSGS_MESSAGE_REPLANTYPE_H
#define NASA_R2_COMMON_MSGS_MESSAGE_REPLANTYPE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nasa_r2_common_msgs
{
template <class ContainerAllocator>
struct ReplanType_
{
  typedef ReplanType_<ContainerAllocator> Type;

  ReplanType_()
    : type(0)  {
    }
  ReplanType_(const ContainerAllocator& _alloc)
    : type(0)  {
  (void)_alloc;
    }



   typedef uint8_t _type_type;
  _type_type type;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NONE)
  #undef NONE
#endif
#if defined(_WIN32) && defined(SOFT)
  #undef SOFT
#endif
#if defined(_WIN32) && defined(HARD)
  #undef HARD
#endif
#if defined(_WIN32) && defined(STOP)
  #undef STOP
#endif
#if defined(_WIN32) && defined(PAUSE)
  #undef PAUSE
#endif
#if defined(_WIN32) && defined(CONTINUE)
  #undef CONTINUE
#endif

  enum {
    NONE = 0u,
    SOFT = 1u,
    HARD = 2u,
    STOP = 3u,
    PAUSE = 4u,
    CONTINUE = 5u,
  };


  typedef boost::shared_ptr< ::nasa_r2_common_msgs::ReplanType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nasa_r2_common_msgs::ReplanType_<ContainerAllocator> const> ConstPtr;

}; // struct ReplanType_

typedef ::nasa_r2_common_msgs::ReplanType_<std::allocator<void> > ReplanType;

typedef boost::shared_ptr< ::nasa_r2_common_msgs::ReplanType > ReplanTypePtr;
typedef boost::shared_ptr< ::nasa_r2_common_msgs::ReplanType const> ReplanTypeConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nasa_r2_common_msgs::ReplanType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nasa_r2_common_msgs::ReplanType_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nasa_r2_common_msgs::ReplanType_<ContainerAllocator1> & lhs, const ::nasa_r2_common_msgs::ReplanType_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nasa_r2_common_msgs::ReplanType_<ContainerAllocator1> & lhs, const ::nasa_r2_common_msgs::ReplanType_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nasa_r2_common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::nasa_r2_common_msgs::ReplanType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nasa_r2_common_msgs::ReplanType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nasa_r2_common_msgs::ReplanType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nasa_r2_common_msgs::ReplanType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nasa_r2_common_msgs::ReplanType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nasa_r2_common_msgs::ReplanType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nasa_r2_common_msgs::ReplanType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "98758e5172733aa54a4f24dd99cdd00f";
  }

  static const char* value(const ::nasa_r2_common_msgs::ReplanType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x98758e5172733aa5ULL;
  static const uint64_t static_value2 = 0x4a4f24dd99cdd00fULL;
};

template<class ContainerAllocator>
struct DataType< ::nasa_r2_common_msgs::ReplanType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nasa_r2_common_msgs/ReplanType";
  }

  static const char* value(const ::nasa_r2_common_msgs::ReplanType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nasa_r2_common_msgs::ReplanType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 type\n"
"\n"
"uint8 NONE = 0\n"
"uint8 SOFT = 1\n"
"uint8 HARD = 2\n"
"uint8 STOP = 3\n"
"uint8 PAUSE = 4\n"
"uint8 CONTINUE = 5\n"
;
  }

  static const char* value(const ::nasa_r2_common_msgs::ReplanType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nasa_r2_common_msgs::ReplanType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ReplanType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nasa_r2_common_msgs::ReplanType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nasa_r2_common_msgs::ReplanType_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NASA_R2_COMMON_MSGS_MESSAGE_REPLANTYPE_H
