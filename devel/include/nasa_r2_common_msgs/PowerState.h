// Generated by gencpp from file nasa_r2_common_msgs/PowerState.msg
// DO NOT EDIT!


#ifndef NASA_R2_COMMON_MSGS_MESSAGE_POWERSTATE_H
#define NASA_R2_COMMON_MSGS_MESSAGE_POWERSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nasa_r2_common_msgs
{
template <class ContainerAllocator>
struct PowerState_
{
  typedef PowerState_<ContainerAllocator> Type;

  PowerState_()
    : data(0)  {
    }
  PowerState_(const ContainerAllocator& _alloc)
    : data(0)  {
  (void)_alloc;
    }



   typedef uint8_t _data_type;
  _data_type data;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif
#if defined(_WIN32) && defined(POWER_OFF)
  #undef POWER_OFF
#endif
#if defined(_WIN32) && defined(LOGIC_POWER)
  #undef LOGIC_POWER
#endif
#if defined(_WIN32) && defined(MOTOR_POWER)
  #undef MOTOR_POWER
#endif
#if defined(_WIN32) && defined(MOTOR48_POWER)
  #undef MOTOR48_POWER
#endif
#if defined(_WIN32) && defined(MOTOR96_POWER)
  #undef MOTOR96_POWER
#endif
#if defined(_WIN32) && defined(FAULTED)
  #undef FAULTED
#endif
#if defined(_WIN32) && defined(TRANSITIONING)
  #undef TRANSITIONING
#endif
#if defined(_WIN32) && defined(IGNORE)
  #undef IGNORE
#endif

  enum {
    UNKNOWN = 0u,
    POWER_OFF = 1u,
    LOGIC_POWER = 2u,
    MOTOR_POWER = 3u,
    MOTOR48_POWER = 4u,
    MOTOR96_POWER = 5u,
    FAULTED = 6u,
    TRANSITIONING = 7u,
    IGNORE = 8u,
  };


  typedef boost::shared_ptr< ::nasa_r2_common_msgs::PowerState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nasa_r2_common_msgs::PowerState_<ContainerAllocator> const> ConstPtr;

}; // struct PowerState_

typedef ::nasa_r2_common_msgs::PowerState_<std::allocator<void> > PowerState;

typedef boost::shared_ptr< ::nasa_r2_common_msgs::PowerState > PowerStatePtr;
typedef boost::shared_ptr< ::nasa_r2_common_msgs::PowerState const> PowerStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nasa_r2_common_msgs::PowerState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nasa_r2_common_msgs::PowerState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nasa_r2_common_msgs::PowerState_<ContainerAllocator1> & lhs, const ::nasa_r2_common_msgs::PowerState_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nasa_r2_common_msgs::PowerState_<ContainerAllocator1> & lhs, const ::nasa_r2_common_msgs::PowerState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nasa_r2_common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::nasa_r2_common_msgs::PowerState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nasa_r2_common_msgs::PowerState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nasa_r2_common_msgs::PowerState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nasa_r2_common_msgs::PowerState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nasa_r2_common_msgs::PowerState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nasa_r2_common_msgs::PowerState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nasa_r2_common_msgs::PowerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "584ec0c2e2cf9b94d0b9da5027668714";
  }

  static const char* value(const ::nasa_r2_common_msgs::PowerState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x584ec0c2e2cf9b94ULL;
  static const uint64_t static_value2 = 0xd0b9da5027668714ULL;
};

template<class ContainerAllocator>
struct DataType< ::nasa_r2_common_msgs::PowerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nasa_r2_common_msgs/PowerState";
  }

  static const char* value(const ::nasa_r2_common_msgs::PowerState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nasa_r2_common_msgs::PowerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 data\n"
"uint8 UNKNOWN       = 0\n"
"uint8 POWER_OFF     = 1\n"
"uint8 LOGIC_POWER   = 2\n"
"uint8 MOTOR_POWER   = 3\n"
"uint8 MOTOR48_POWER = 4\n"
"uint8 MOTOR96_POWER = 5\n"
"uint8 FAULTED       = 6\n"
"uint8 TRANSITIONING = 7\n"
"uint8 IGNORE        = 8\n"
;
  }

  static const char* value(const ::nasa_r2_common_msgs::PowerState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nasa_r2_common_msgs::PowerState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PowerState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nasa_r2_common_msgs::PowerState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nasa_r2_common_msgs::PowerState_<ContainerAllocator>& v)
  {
    s << indent << "data: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NASA_R2_COMMON_MSGS_MESSAGE_POWERSTATE_H
