// Generated by gencpp from file nasa_r2_common_msgs/JointControlMode.msg
// DO NOT EDIT!


#ifndef NASA_R2_COMMON_MSGS_MESSAGE_JOINTCONTROLMODE_H
#define NASA_R2_COMMON_MSGS_MESSAGE_JOINTCONTROLMODE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nasa_r2_common_msgs
{
template <class ContainerAllocator>
struct JointControlMode_
{
  typedef JointControlMode_<ContainerAllocator> Type;

  JointControlMode_()
    : state(0)  {
    }
  JointControlMode_(const ContainerAllocator& _alloc)
    : state(0)  {
  (void)_alloc;
    }



   typedef uint8_t _state_type;
  _state_type state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(IGNORE)
  #undef IGNORE
#endif
#if defined(_WIN32) && defined(INVALID)
  #undef INVALID
#endif
#if defined(_WIN32) && defined(BOOTLOADER)
  #undef BOOTLOADER
#endif
#if defined(_WIN32) && defined(FAULTED)
  #undef FAULTED
#endif
#if defined(_WIN32) && defined(SAFE)
  #undef SAFE
#endif
#if defined(_WIN32) && defined(OFF)
  #undef OFF
#endif
#if defined(_WIN32) && defined(PARK)
  #undef PARK
#endif
#if defined(_WIN32) && defined(NEUTRAL)
  #undef NEUTRAL
#endif
#if defined(_WIN32) && defined(DRIVE)
  #undef DRIVE
#endif

  enum {
    IGNORE = 0u,
    INVALID = 1u,
    BOOTLOADER = 2u,
    FAULTED = 3u,
    SAFE = 4u,
    OFF = 5u,
    PARK = 6u,
    NEUTRAL = 7u,
    DRIVE = 8u,
  };


  typedef boost::shared_ptr< ::nasa_r2_common_msgs::JointControlMode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nasa_r2_common_msgs::JointControlMode_<ContainerAllocator> const> ConstPtr;

}; // struct JointControlMode_

typedef ::nasa_r2_common_msgs::JointControlMode_<std::allocator<void> > JointControlMode;

typedef boost::shared_ptr< ::nasa_r2_common_msgs::JointControlMode > JointControlModePtr;
typedef boost::shared_ptr< ::nasa_r2_common_msgs::JointControlMode const> JointControlModeConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nasa_r2_common_msgs::JointControlMode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nasa_r2_common_msgs::JointControlMode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nasa_r2_common_msgs::JointControlMode_<ContainerAllocator1> & lhs, const ::nasa_r2_common_msgs::JointControlMode_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nasa_r2_common_msgs::JointControlMode_<ContainerAllocator1> & lhs, const ::nasa_r2_common_msgs::JointControlMode_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nasa_r2_common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::nasa_r2_common_msgs::JointControlMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nasa_r2_common_msgs::JointControlMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nasa_r2_common_msgs::JointControlMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nasa_r2_common_msgs::JointControlMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nasa_r2_common_msgs::JointControlMode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nasa_r2_common_msgs::JointControlMode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nasa_r2_common_msgs::JointControlMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ed18104f2125248e91775725024700fe";
  }

  static const char* value(const ::nasa_r2_common_msgs::JointControlMode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xed18104f2125248eULL;
  static const uint64_t static_value2 = 0x91775725024700feULL;
};

template<class ContainerAllocator>
struct DataType< ::nasa_r2_common_msgs::JointControlMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nasa_r2_common_msgs/JointControlMode";
  }

  static const char* value(const ::nasa_r2_common_msgs::JointControlMode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nasa_r2_common_msgs::JointControlMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 state\n"
"uint8 IGNORE     = 0\n"
"uint8 INVALID    = 1\n"
"uint8 BOOTLOADER = 2\n"
"uint8 FAULTED    = 3\n"
"uint8 SAFE       = 4\n"
"uint8 OFF        = 5\n"
"uint8 PARK       = 6\n"
"uint8 NEUTRAL    = 7\n"
"uint8 DRIVE      = 8\n"
;
  }

  static const char* value(const ::nasa_r2_common_msgs::JointControlMode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nasa_r2_common_msgs::JointControlMode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointControlMode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nasa_r2_common_msgs::JointControlMode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nasa_r2_common_msgs::JointControlMode_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NASA_R2_COMMON_MSGS_MESSAGE_JOINTCONTROLMODE_H
