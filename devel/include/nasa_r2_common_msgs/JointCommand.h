// Generated by gencpp from file nasa_r2_common_msgs/JointCommand.msg
// DO NOT EDIT!


#ifndef NASA_R2_COMMON_MSGS_MESSAGE_JOINTCOMMAND_H
#define NASA_R2_COMMON_MSGS_MESSAGE_JOINTCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace nasa_r2_common_msgs
{
template <class ContainerAllocator>
struct JointCommand_
{
  typedef JointCommand_<ContainerAllocator> Type;

  JointCommand_()
    : header()
    , name()
    , desiredPosition()
    , desiredPositionVelocityLimit()
    , feedForwardTorque()
    , proportionalGain()
    , derivativeGain()
    , integralGain()
    , positionLoopTorqueLimit()
    , positionLoopWindupLimit()
    , torqueLoopVelocityLimit()  {
    }
  JointCommand_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , name(_alloc)
    , desiredPosition(_alloc)
    , desiredPositionVelocityLimit(_alloc)
    , feedForwardTorque(_alloc)
    , proportionalGain(_alloc)
    , derivativeGain(_alloc)
    , integralGain(_alloc)
    , positionLoopTorqueLimit(_alloc)
    , positionLoopWindupLimit(_alloc)
    , torqueLoopVelocityLimit(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _name_type;
  _name_type name;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _desiredPosition_type;
  _desiredPosition_type desiredPosition;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _desiredPositionVelocityLimit_type;
  _desiredPositionVelocityLimit_type desiredPositionVelocityLimit;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _feedForwardTorque_type;
  _feedForwardTorque_type feedForwardTorque;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _proportionalGain_type;
  _proportionalGain_type proportionalGain;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _derivativeGain_type;
  _derivativeGain_type derivativeGain;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _integralGain_type;
  _integralGain_type integralGain;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _positionLoopTorqueLimit_type;
  _positionLoopTorqueLimit_type positionLoopTorqueLimit;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _positionLoopWindupLimit_type;
  _positionLoopWindupLimit_type positionLoopWindupLimit;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _torqueLoopVelocityLimit_type;
  _torqueLoopVelocityLimit_type torqueLoopVelocityLimit;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(FULL)
  #undef FULL
#endif
#if defined(_WIN32) && defined(GRAVITY)
  #undef GRAVITY
#endif
#if defined(_WIN32) && defined(INERTIA)
  #undef INERTIA
#endif
#if defined(_WIN32) && defined(NONE)
  #undef NONE
#endif


  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> FULL;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> GRAVITY;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> INERTIA;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> NONE;

  typedef boost::shared_ptr< ::nasa_r2_common_msgs::JointCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nasa_r2_common_msgs::JointCommand_<ContainerAllocator> const> ConstPtr;

}; // struct JointCommand_

typedef ::nasa_r2_common_msgs::JointCommand_<std::allocator<void> > JointCommand;

typedef boost::shared_ptr< ::nasa_r2_common_msgs::JointCommand > JointCommandPtr;
typedef boost::shared_ptr< ::nasa_r2_common_msgs::JointCommand const> JointCommandConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      JointCommand_<ContainerAllocator>::FULL =
        
          "full"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      JointCommand_<ContainerAllocator>::GRAVITY =
        
          "gravity"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      JointCommand_<ContainerAllocator>::INERTIA =
        
          "inertia"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      JointCommand_<ContainerAllocator>::NONE =
        
          "none"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nasa_r2_common_msgs::JointCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nasa_r2_common_msgs::JointCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nasa_r2_common_msgs::JointCommand_<ContainerAllocator1> & lhs, const ::nasa_r2_common_msgs::JointCommand_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.name == rhs.name &&
    lhs.desiredPosition == rhs.desiredPosition &&
    lhs.desiredPositionVelocityLimit == rhs.desiredPositionVelocityLimit &&
    lhs.feedForwardTorque == rhs.feedForwardTorque &&
    lhs.proportionalGain == rhs.proportionalGain &&
    lhs.derivativeGain == rhs.derivativeGain &&
    lhs.integralGain == rhs.integralGain &&
    lhs.positionLoopTorqueLimit == rhs.positionLoopTorqueLimit &&
    lhs.positionLoopWindupLimit == rhs.positionLoopWindupLimit &&
    lhs.torqueLoopVelocityLimit == rhs.torqueLoopVelocityLimit;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nasa_r2_common_msgs::JointCommand_<ContainerAllocator1> & lhs, const ::nasa_r2_common_msgs::JointCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nasa_r2_common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::nasa_r2_common_msgs::JointCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nasa_r2_common_msgs::JointCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nasa_r2_common_msgs::JointCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nasa_r2_common_msgs::JointCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nasa_r2_common_msgs::JointCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nasa_r2_common_msgs::JointCommand_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nasa_r2_common_msgs::JointCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c56e7e90d9ba9be819e9e813c2544894";
  }

  static const char* value(const ::nasa_r2_common_msgs::JointCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc56e7e90d9ba9be8ULL;
  static const uint64_t static_value2 = 0x19e9e813c2544894ULL;
};

template<class ContainerAllocator>
struct DataType< ::nasa_r2_common_msgs::JointCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nasa_r2_common_msgs/JointCommand";
  }

  static const char* value(const ::nasa_r2_common_msgs::JointCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nasa_r2_common_msgs::JointCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"string[] name\n"
"float64[] desiredPosition\n"
"float64[] desiredPositionVelocityLimit\n"
"float64[] feedForwardTorque\n"
"float64[] proportionalGain\n"
"float64[] derivativeGain\n"
"float64[] integralGain\n"
"float64[] positionLoopTorqueLimit\n"
"float64[] positionLoopWindupLimit\n"
"float64[] torqueLoopVelocityLimit\n"
"\n"
"string FULL           =full\n"
"string GRAVITY        =gravity\n"
"string INERTIA        =inertia\n"
"string NONE           =none\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::nasa_r2_common_msgs::JointCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nasa_r2_common_msgs::JointCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.name);
      stream.next(m.desiredPosition);
      stream.next(m.desiredPositionVelocityLimit);
      stream.next(m.feedForwardTorque);
      stream.next(m.proportionalGain);
      stream.next(m.derivativeGain);
      stream.next(m.integralGain);
      stream.next(m.positionLoopTorqueLimit);
      stream.next(m.positionLoopWindupLimit);
      stream.next(m.torqueLoopVelocityLimit);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nasa_r2_common_msgs::JointCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nasa_r2_common_msgs::JointCommand_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "name[]" << std::endl;
    for (size_t i = 0; i < v.name.size(); ++i)
    {
      s << indent << "  name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name[i]);
    }
    s << indent << "desiredPosition[]" << std::endl;
    for (size_t i = 0; i < v.desiredPosition.size(); ++i)
    {
      s << indent << "  desiredPosition[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.desiredPosition[i]);
    }
    s << indent << "desiredPositionVelocityLimit[]" << std::endl;
    for (size_t i = 0; i < v.desiredPositionVelocityLimit.size(); ++i)
    {
      s << indent << "  desiredPositionVelocityLimit[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.desiredPositionVelocityLimit[i]);
    }
    s << indent << "feedForwardTorque[]" << std::endl;
    for (size_t i = 0; i < v.feedForwardTorque.size(); ++i)
    {
      s << indent << "  feedForwardTorque[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.feedForwardTorque[i]);
    }
    s << indent << "proportionalGain[]" << std::endl;
    for (size_t i = 0; i < v.proportionalGain.size(); ++i)
    {
      s << indent << "  proportionalGain[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.proportionalGain[i]);
    }
    s << indent << "derivativeGain[]" << std::endl;
    for (size_t i = 0; i < v.derivativeGain.size(); ++i)
    {
      s << indent << "  derivativeGain[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.derivativeGain[i]);
    }
    s << indent << "integralGain[]" << std::endl;
    for (size_t i = 0; i < v.integralGain.size(); ++i)
    {
      s << indent << "  integralGain[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.integralGain[i]);
    }
    s << indent << "positionLoopTorqueLimit[]" << std::endl;
    for (size_t i = 0; i < v.positionLoopTorqueLimit.size(); ++i)
    {
      s << indent << "  positionLoopTorqueLimit[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.positionLoopTorqueLimit[i]);
    }
    s << indent << "positionLoopWindupLimit[]" << std::endl;
    for (size_t i = 0; i < v.positionLoopWindupLimit.size(); ++i)
    {
      s << indent << "  positionLoopWindupLimit[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.positionLoopWindupLimit[i]);
    }
    s << indent << "torqueLoopVelocityLimit[]" << std::endl;
    for (size_t i = 0; i < v.torqueLoopVelocityLimit.size(); ++i)
    {
      s << indent << "  torqueLoopVelocityLimit[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.torqueLoopVelocityLimit[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NASA_R2_COMMON_MSGS_MESSAGE_JOINTCOMMAND_H
